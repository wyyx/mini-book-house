"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var classic_service_1 = require("../../services/classic.service");
var like_service_1 = require("../../services/like.service");
Page({
    data: {
        currentClassic: {},
        firstClassic: {},
        isFirst: true,
        isLast: false,
        likeStatus: false,
        favNums: 0
    },
    onLoad: function (options) {
        var _this = this;
        classic_service_1.classicService.getLatest(function (res) {
            console.log('data', res.data);
            var classic = res.data;
            _this.setData({
                currentClassic: classic,
                firstClassic: classic
            });
            _this.loadLikeInfo(classic.type, classic.id);
            classic_service_1.classicService.setStorageSync(res.data['index'], res.data);
        });
    },
    onLike: function (event) {
        var artId = this.data.currentClassic.id;
        var type = this.data.currentClassic.type;
        var like = event.detail.like;
        like_service_1.likeService.like({ artId: artId, type: type, like: like });
    },
    onPrevious: function (event) {
        this.onPreviousOrNext('next');
    },
    onNext: function (event) {
        this.onPreviousOrNext('previous');
    },
    onPreviousOrNext: function (previousOrNext) {
        var _this = this;
        classic_service_1.classicService.getPreviousOrNext(this.data.currentClassic.index, previousOrNext, function (res) {
            var classic = res;
            _this.loadLikeInfo(classic.type, classic.id);
            _this.setData({
                currentClassic: classic,
                isFirst: classic_service_1.classicService.isFirst(classic, _this.data.firstClassic),
                isLast: classic_service_1.classicService.isLast(classic)
            });
        });
    },
    loadLikeInfo: function (type, id) {
        var _this = this;
        like_service_1.likeService.getLikeInfo(type, id, function (res) {
            console.log('TCL: res', res);
            _this.setData({
                likeStatus: res.like_status,
                favNums: res.fav_nums
            });
        });
    },
    onReady: function () { },
    onShow: function () { },
    onHide: function () { },
    onUnload: function () { },
    onPullDownRefresh: function () { },
    onReachBottom: function () { }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xhc3NpYy5wYWdlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY2xhc3NpYy5wYWdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsa0VBQStEO0FBRS9ELDREQUF5RDtBQUd6RCxJQUFJLENBQUM7SUFJSCxJQUFJLEVBQUU7UUFDSixjQUFjLEVBQUUsRUFBYTtRQUM3QixZQUFZLEVBQUUsRUFBYTtRQUMzQixPQUFPLEVBQUUsSUFBSTtRQUNiLE1BQU0sRUFBRSxLQUFLO1FBQ2IsVUFBVSxFQUFFLEtBQUs7UUFDakIsT0FBTyxFQUFFLENBQUM7S0FDWDtJQU1ELE1BQU0sRUFBRSxVQUFTLE9BQU87UUFBaEIsaUJBY1A7UUFiQyxnQ0FBYyxDQUFDLFNBQVMsQ0FBQyxVQUFBLEdBQUc7WUFDMUIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFBO1lBQzdCLElBQU0sT0FBTyxHQUFZLEdBQUcsQ0FBQyxJQUFlLENBQUE7WUFFNUMsS0FBSSxDQUFDLE9BQU8sQ0FBQztnQkFDWCxjQUFjLEVBQUUsT0FBTztnQkFDdkIsWUFBWSxFQUFFLE9BQU87YUFDdEIsQ0FBQyxDQUFBO1lBRUYsS0FBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtZQUUzQyxnQ0FBYyxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUM1RCxDQUFDLENBQUMsQ0FBQTtJQUNKLENBQUM7SUFFRCxNQUFNLEVBQUUsVUFBUyxLQUFLO1FBQ3BCLElBQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLEVBQUUsQ0FBQTtRQUN6QyxJQUFNLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUE7UUFDMUMsSUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUE7UUFFOUIsMEJBQVcsQ0FBQyxJQUFJLENBQUMsRUFBRSxLQUFLLE9BQUEsRUFBRSxJQUFJLE1BQUEsRUFBRSxJQUFJLE1BQUEsRUFBRSxDQUFDLENBQUE7SUFDekMsQ0FBQztJQUVELFVBQVUsRUFBRSxVQUFTLEtBQUs7UUFDeEIsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQy9CLENBQUM7SUFFRCxNQUFNLEVBQUUsVUFBUyxLQUFLO1FBQ3BCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxVQUFVLENBQUMsQ0FBQTtJQUNuQyxDQUFDO0lBRUQsZ0JBQWdCLEVBQWhCLFVBQWlCLGNBQW1DO1FBQXBELGlCQVlDO1FBWEMsZ0NBQWMsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxLQUFLLEVBQUUsY0FBYyxFQUFFLFVBQUEsR0FBRztZQUNsRixJQUFNLE9BQU8sR0FBRyxHQUFjLENBQUE7WUFFOUIsS0FBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtZQUUzQyxLQUFJLENBQUMsT0FBTyxDQUFDO2dCQUNYLGNBQWMsRUFBRSxPQUFPO2dCQUN2QixPQUFPLEVBQUUsZ0NBQWMsQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLEtBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDO2dCQUNoRSxNQUFNLEVBQUUsZ0NBQWMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDO2FBQ3ZDLENBQUMsQ0FBQTtRQUNKLENBQUMsQ0FBQyxDQUFBO0lBQ0osQ0FBQztJQUVELFlBQVksRUFBWixVQUFhLElBQVksRUFBRSxFQUFVO1FBQXJDLGlCQVFDO1FBUEMsMEJBQVcsQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRSxVQUFBLEdBQUc7WUFDbkMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUUsR0FBRyxDQUFDLENBQUE7WUFDNUIsS0FBSSxDQUFDLE9BQU8sQ0FBQztnQkFDWCxVQUFVLEVBQUUsR0FBRyxDQUFDLFdBQVc7Z0JBQzNCLE9BQU8sRUFBRSxHQUFHLENBQUMsUUFBUTthQUN0QixDQUFDLENBQUE7UUFDSixDQUFDLENBQUMsQ0FBQTtJQUNKLENBQUM7SUFLRCxPQUFPLEVBQUUsY0FBWSxDQUFDO0lBS3RCLE1BQU0sRUFBRSxjQUFZLENBQUM7SUFLckIsTUFBTSxFQUFFLGNBQVksQ0FBQztJQUtyQixRQUFRLEVBQUUsY0FBWSxDQUFDO0lBS3ZCLGlCQUFpQixFQUFFLGNBQVksQ0FBQztJQUtoQyxhQUFhLEVBQUUsY0FBWSxDQUFDO0NBTTdCLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNsYXNzaWNTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvY2xhc3NpYy5zZXJ2aWNlJ1xyXG5pbXBvcnQgeyBDbGFzc2ljIH0gZnJvbSAnLi4vLi4vbW9kZWxzL2NsYXNzaWMubW9kZWwnXHJcbmltcG9ydCB7IGxpa2VTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvbGlrZS5zZXJ2aWNlJ1xyXG5cclxuLy8gbWluaXByb2dyYW0vcGFnZXMvY2xhc3NpYy9jbGFzc2ljLmpzXHJcblBhZ2Uoe1xyXG4gIC8qKlxyXG4gICAqIFBhZ2UgaW5pdGlhbCBkYXRhXHJcbiAgICovXHJcbiAgZGF0YToge1xyXG4gICAgY3VycmVudENsYXNzaWM6IHt9IGFzIENsYXNzaWMsXHJcbiAgICBmaXJzdENsYXNzaWM6IHt9IGFzIENsYXNzaWMsXHJcbiAgICBpc0ZpcnN0OiB0cnVlLFxyXG4gICAgaXNMYXN0OiBmYWxzZSxcclxuICAgIGxpa2VTdGF0dXM6IGZhbHNlLFxyXG4gICAgZmF2TnVtczogMFxyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIExpZmVjeWNsZSBmdW5jdGlvbi0tQ2FsbGVkIHdoZW4gcGFnZSBsb2FkXHJcbiAgICovXHJcblxyXG4gIG9uTG9hZDogZnVuY3Rpb24ob3B0aW9ucykge1xyXG4gICAgY2xhc3NpY1NlcnZpY2UuZ2V0TGF0ZXN0KHJlcyA9PiB7XHJcbiAgICAgIGNvbnNvbGUubG9nKCdkYXRhJywgcmVzLmRhdGEpXHJcbiAgICAgIGNvbnN0IGNsYXNzaWM6IENsYXNzaWMgPSByZXMuZGF0YSBhcyBDbGFzc2ljXHJcblxyXG4gICAgICB0aGlzLnNldERhdGEoe1xyXG4gICAgICAgIGN1cnJlbnRDbGFzc2ljOiBjbGFzc2ljLFxyXG4gICAgICAgIGZpcnN0Q2xhc3NpYzogY2xhc3NpY1xyXG4gICAgICB9KVxyXG5cclxuICAgICAgdGhpcy5sb2FkTGlrZUluZm8oY2xhc3NpYy50eXBlLCBjbGFzc2ljLmlkKVxyXG5cclxuICAgICAgY2xhc3NpY1NlcnZpY2Uuc2V0U3RvcmFnZVN5bmMocmVzLmRhdGFbJ2luZGV4J10sIHJlcy5kYXRhKVxyXG4gICAgfSlcclxuICB9LFxyXG5cclxuICBvbkxpa2U6IGZ1bmN0aW9uKGV2ZW50KSB7XHJcbiAgICBjb25zdCBhcnRJZCA9IHRoaXMuZGF0YS5jdXJyZW50Q2xhc3NpYy5pZFxyXG4gICAgY29uc3QgdHlwZSA9IHRoaXMuZGF0YS5jdXJyZW50Q2xhc3NpYy50eXBlXHJcbiAgICBjb25zdCBsaWtlID0gZXZlbnQuZGV0YWlsLmxpa2VcclxuXHJcbiAgICBsaWtlU2VydmljZS5saWtlKHsgYXJ0SWQsIHR5cGUsIGxpa2UgfSlcclxuICB9LFxyXG5cclxuICBvblByZXZpb3VzOiBmdW5jdGlvbihldmVudCkge1xyXG4gICAgdGhpcy5vblByZXZpb3VzT3JOZXh0KCduZXh0JylcclxuICB9LFxyXG5cclxuICBvbk5leHQ6IGZ1bmN0aW9uKGV2ZW50KSB7XHJcbiAgICB0aGlzLm9uUHJldmlvdXNPck5leHQoJ3ByZXZpb3VzJylcclxuICB9LFxyXG5cclxuICBvblByZXZpb3VzT3JOZXh0KHByZXZpb3VzT3JOZXh0OiAncHJldmlvdXMnIHwgJ25leHQnKSB7XHJcbiAgICBjbGFzc2ljU2VydmljZS5nZXRQcmV2aW91c09yTmV4dCh0aGlzLmRhdGEuY3VycmVudENsYXNzaWMuaW5kZXgsIHByZXZpb3VzT3JOZXh0LCByZXMgPT4ge1xyXG4gICAgICBjb25zdCBjbGFzc2ljID0gcmVzIGFzIENsYXNzaWNcclxuXHJcbiAgICAgIHRoaXMubG9hZExpa2VJbmZvKGNsYXNzaWMudHlwZSwgY2xhc3NpYy5pZClcclxuXHJcbiAgICAgIHRoaXMuc2V0RGF0YSh7XHJcbiAgICAgICAgY3VycmVudENsYXNzaWM6IGNsYXNzaWMsXHJcbiAgICAgICAgaXNGaXJzdDogY2xhc3NpY1NlcnZpY2UuaXNGaXJzdChjbGFzc2ljLCB0aGlzLmRhdGEuZmlyc3RDbGFzc2ljKSxcclxuICAgICAgICBpc0xhc3Q6IGNsYXNzaWNTZXJ2aWNlLmlzTGFzdChjbGFzc2ljKVxyXG4gICAgICB9KVxyXG4gICAgfSlcclxuICB9LFxyXG5cclxuICBsb2FkTGlrZUluZm8odHlwZTogbnVtYmVyLCBpZDogbnVtYmVyKSB7XHJcbiAgICBsaWtlU2VydmljZS5nZXRMaWtlSW5mbyh0eXBlLCBpZCwgcmVzID0+IHtcclxuICAgICAgY29uc29sZS5sb2coJ1RDTDogcmVzJywgcmVzKVxyXG4gICAgICB0aGlzLnNldERhdGEoe1xyXG4gICAgICAgIGxpa2VTdGF0dXM6IHJlcy5saWtlX3N0YXR1cyxcclxuICAgICAgICBmYXZOdW1zOiByZXMuZmF2X251bXNcclxuICAgICAgfSlcclxuICAgIH0pXHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICogTGlmZWN5Y2xlIGZ1bmN0aW9uLS1DYWxsZWQgd2hlbiBwYWdlIGlzIGluaXRpYWxseSByZW5kZXJlZFxyXG4gICAqL1xyXG4gIG9uUmVhZHk6IGZ1bmN0aW9uKCkge30sXHJcblxyXG4gIC8qKlxyXG4gICAqIExpZmVjeWNsZSBmdW5jdGlvbi0tQ2FsbGVkIHdoZW4gcGFnZSBzaG93XHJcbiAgICovXHJcbiAgb25TaG93OiBmdW5jdGlvbigpIHt9LFxyXG5cclxuICAvKipcclxuICAgKiBMaWZlY3ljbGUgZnVuY3Rpb24tLUNhbGxlZCB3aGVuIHBhZ2UgaGlkZVxyXG4gICAqL1xyXG4gIG9uSGlkZTogZnVuY3Rpb24oKSB7fSxcclxuXHJcbiAgLyoqXHJcbiAgICogTGlmZWN5Y2xlIGZ1bmN0aW9uLS1DYWxsZWQgd2hlbiBwYWdlIHVubG9hZFxyXG4gICAqL1xyXG4gIG9uVW5sb2FkOiBmdW5jdGlvbigpIHt9LFxyXG5cclxuICAvKipcclxuICAgKiBQYWdlIGV2ZW50IGhhbmRsZXIgZnVuY3Rpb24tLUNhbGxlZCB3aGVuIHVzZXIgZHJvcCBkb3duXHJcbiAgICovXHJcbiAgb25QdWxsRG93blJlZnJlc2g6IGZ1bmN0aW9uKCkge30sXHJcblxyXG4gIC8qKlxyXG4gICAqIENhbGxlZCB3aGVuIHBhZ2UgcmVhY2ggYm90dG9tXHJcbiAgICovXHJcbiAgb25SZWFjaEJvdHRvbTogZnVuY3Rpb24oKSB7fVxyXG5cclxuICAvLyAvKipcclxuICAvLyAgKiBDYWxsZWQgd2hlbiB1c2VyIGNsaWNrIG9uIHRoZSB0b3AgcmlnaHQgY29ybmVyIHRvIHNoYXJlXHJcbiAgLy8gICovXHJcbiAgLy8gb25TaGFyZUFwcE1lc3NhZ2U6IGZ1bmN0aW9uKCkge31cclxufSlcclxuIl19